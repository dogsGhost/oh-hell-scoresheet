// Generated by CoffeeScript 1.6.1
(function() {
  var Hand, Ohs, Player, Utils;

  Utils = {
    transEndEventNames: {
      'WebkitTransition': 'webkitTransitionEnd',
      'MozTransition': 'transitionend',
      'OTransition': 'oTransitionEnd',
      'msTransition': 'MSTransitionEnd',
      'transition': 'transitionend'
    },
    transEndEventName: function() {
      if (Modernizr.csstransitions) {
        return this.transEndEventNames[Modernizr.prefixed('transition')];
      } else {
        return '';
      }
    },
    maxArray: function(array) {
      return Math.max.apply(null, array);
    },
    trimCheck: function() {
      if (!String.prototype.trim) {
        String.prototype.trim = function() {
          return this.replace(/^\s+|\s+$/g, '');
        };
      }
    },
    transitionCallback: function($el) {
      if (this.transEndEventName()) {
        return $el.on(this.transEndEventName(), function() {
          return $el.remove();
        });
      }
    },
    transitionTrigger: function($el) {
      if (this.transEndEventName()) {
        return $el.addClass('hide');
      }
    },
    transitionFallback: function($el, callback) {
      if (!this.transEndEventName()) {
        return $el.slideUp(400, function() {
          if (callback) {
            return $el.remove();
          }
        });
      }
    }
  };

  /* --------------------------------------------
       Begin Player.coffee
  --------------------------------------------
  */


  Player = (function() {

    function Player(name) {
      this.name = name;
      this.hands = [];
      this.totalScore = 0;
    }

    return Player;

  })();

  /* --------------------------------------------
       Begin Hand.coffee
  --------------------------------------------
  */


  Hand = (function() {

    function Hand(bid) {
      this.bid = bid;
      this.pointsEarned = 0;
      this.correctBid = false;
    }

    Hand.prototype.scoreHand = function(guess) {
      if (guess === 'correct') {
        this.correctBid = true;
        this.pointsEarned = this.bid * Ohs.game.settings.trickValue + Ohs.game.settings.correctBidValue;
      }
    };

    return Hand;

  })();

  /* --------------------------------------------
       Begin ohell.coffee
  --------------------------------------------
  */


  Ohs = {
    init: function() {
      this.setButtons();
      this.cacheVariables();
      return this.bindNewGame();
    },
    setButtons: function() {
      $('button').each(function() {
        if (!$(this).hasClass('ui-button')) {
          return $(this).button();
        }
      });
      return $('.js-radioset').each(function() {
        if (!$(this).hasClass('ui-buttonset')) {
          return $(this).buttonset();
        }
      });
    },
    cacheVariables: function() {
      this.$namesFormTemplate = Handlebars.compile($('#namesFormTemplate').html());
      this.$biddingFormTemplate = Handlebars.compile($('#biddingFormTemplate').html());
      this.$correctBidsFormTemplate = Handlebars.compile($('#correctBidsFormTemplate').html());
      this.$scoreBoardTemplate = Handlebars.compile($('#scoreBoardTemplate').html());
      this.$newGameBtn = $('#newGameBtn');
      this.$container = $('#container');
      this.$numPlayersSection = $('#numPlayersSection');
      this.$scoringForm = $('#scoringForm');
      this.previousHands = '';
      this.gameStarted = false;
      this.game = {
        players: [],
        settings: {}
      };
    },
    bindNewGame: function() {
      this.$newGameBtn.on('click', this.startNewGame);
      return this.$numPlayersSection.on('click', 'button', this.setNumPlayers);
    },
    startNewGame: function() {
      if (!Ohs.gameStarted) {
        Ohs.gameStarted = true;
      } else {
        Ohs.resetGame();
      }
      return Ohs.$numPlayersSection.removeClass('hide');
    },
    resetGame: function() {
      this.game = {
        players: [],
        settings: {}
      };
      this.previousHands = '';
      this.$numPlayersSection.addClass('hide').show();
      return this.$scoringForm.addClass('hide').show().nextAll().remove();
    },
    setNumPlayers: function() {
      var p;
      Ohs.game.settings.numPlayers = parseInt(Ohs.$numPlayersSection.find('input:checked').val(), 10);
      p = Ohs.game.settings.numPlayers;
      Ohs.game.settings.maxNumCards = p <= 5 ? 10 : Math.floor(52 / p);
      return Ohs.renderNamesForm();
    },
    renderNamesForm: function() {
      var num, players;
      Utils.transitionTrigger(this.$numPlayersSection);
      Utils.transitionFallback(this.$numPlayersSection);
      players = {
        count: (function() {
          var _i, _ref, _results;
          _results = [];
          for (num = _i = 1, _ref = this.game.settings.numPlayers; 1 <= _ref ? _i <= _ref : _i >= _ref; num = 1 <= _ref ? ++_i : --_i) {
            _results.push(num);
          }
          return _results;
        }).call(this)
      };
      this.$container.append(this.$namesFormTemplate(players));
      this.setButtons();
      return $('#namesForm').on('submit', this.setPlayerNames).removeClass('hide');
    },
    setPlayerNames: function(e) {
      var index, name, names, _i, _len;
      e.preventDefault();
      names = $(this).serializeArray();
      for (index = _i = 0, _len = names.length; _i < _len; index = ++_i) {
        name = names[index];
        if (!name.value) {
          name.value = "Player " + (index + 1);
        }
        Ohs.game.players.push(new Player(name.value.trim()));
      }
      Utils.transitionCallback($(this));
      Utils.transitionTrigger($(this));
      Utils.transitionFallback($(this), true);
      return Ohs.showScoringForm();
    },
    showScoringForm: function() {
      return this.$scoringForm.on('submit', this.setScoringParams).removeClass('hide');
    },
    setScoringParams: function(e) {
      var bidVal, h, num, params, trickVal, _i, _j, _ref, _ref1;
      e.preventDefault();
      params = $(this).serializeArray();
      if (parseInt(params[0].value, 10) === 0) {
        h = (function() {
          var _i, _ref, _results;
          _results = [];
          for (num = _i = 1, _ref = Ohs.game.settings.maxNumCards; 1 <= _ref ? _i <= _ref : _i >= _ref; num = 1 <= _ref ? ++_i : --_i) {
            _results.push(num);
          }
          return _results;
        })();
        for (num = _i = _ref = Ohs.game.settings.maxNumCards - 1; _ref <= 1 ? _i <= 1 : _i >= 1; num = _ref <= 1 ? ++_i : --_i) {
          h.push(num);
        }
      } else {
        h = (function() {
          var _j, _ref1, _results;
          _results = [];
          for (num = _j = _ref1 = Ohs.game.settings.maxNumCards; _ref1 <= 1 ? _j <= 1 : _j >= 1; num = _ref1 <= 1 ? ++_j : --_j) {
            _results.push(num);
          }
          return _results;
        })();
        for (num = _j = 2, _ref1 = Ohs.game.settings.maxNumCards; 2 <= _ref1 ? _j <= _ref1 : _j >= _ref1; num = 2 <= _ref1 ? ++_j : --_j) {
          h.push(num);
        }
      }
      Ohs.game.settings.handSizeOrder = h;
      trickVal = parseInt(params[1].value, 10);
      Ohs.game.settings.trickValue = trickVal ? trickVal : 1;
      bidVal = parseInt(params[2].value, 10);
      Ohs.game.settings.correctBidValue = bidVal ? bidVal : 5;
      Utils.transitionTrigger($(this));
      Utils.transitionFallback($(this));
      return Ohs.renderBiddingForm();
    },
    renderBiddingForm: function() {
      var data, num;
      data = this.game;
      data.handNum = data.players[0].hands.length + 1;
      data.numCards = data.settings.handSizeOrder[data.handNum - 1];
      data.count = (function() {
        var _i, _ref, _results;
        _results = [];
        for (num = _i = 0, _ref = data.numCards; 0 <= _ref ? _i <= _ref : _i >= _ref; num = 0 <= _ref ? ++_i : --_i) {
          _results.push(num);
        }
        return _results;
      })();
      data.numCards += data.numCards > 1 ? ' cards' : ' card';
      this.$container.append(this.$biddingFormTemplate(data));
      this.setButtons();
      return $('#biddingForm').on('submit', this.setPlayerBids).removeClass('hide').next().on('click', 'button', this.renderCorrectBidsForm);
    },
    setPlayerBids: function(e) {
      var bid, bids, player, _i, _j, _len, _len1, _ref;
      e.preventDefault();
      bids = $(this).serializeArray();
      _ref = Ohs.game.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        for (_j = 0, _len1 = bids.length; _j < _len1; _j++) {
          bid = bids[_j];
          if (player.name === bid.name) {
            player.hands.push(new Hand(bid.value));
          }
        }
      }
      Utils.transitionCallback($(this));
      Utils.transitionTrigger($(this));
      $(this).next().removeClass('hide');
      return Utils.transitionFallback($(this), true);
    },
    renderCorrectBidsForm: function() {
      var data, i, p, player, _i, _len, _ref;
      data = {
        players: []
      };
      i = Ohs.game.players[0].hands.length - 1;
      _ref = Ohs.game.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        p = {
          name: player.name,
          bid: player.hands[i].bid
        };
        p.bid += p.bid === '1' ? ' trick' : ' tricks';
        data.players.push(p);
      }
      Ohs.$container.append(Ohs.$correctBidsFormTemplate(data));
      Ohs.setButtons();
      Ohs.$correctBidsForm = $('#correctBidsForm');
      Utils.transitionCallback($(this).parent());
      Utils.transitionTrigger($(this).parent());
      Utils.transitionFallback($(this).parent(), true);
      return Ohs.$correctBidsForm.on('submit', Ohs.calcBids).removeClass('hide');
    },
    calcBids: function(e) {
      var hand, player, result, results, _i, _j, _len, _len1, _ref;
      e.preventDefault();
      results = $(this).serializeArray();
      hand = Ohs.game.players[0].hands.length - 1;
      _ref = Ohs.game.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        for (_j = 0, _len1 = results.length; _j < _len1; _j++) {
          result = results[_j];
          if (result.name === player.name) {
            player.hands[hand].scoreHand(result.value);
            player.totalScore += player.hands[hand].pointsEarned;
          }
        }
      }
      return Ohs.renderScoreBoard();
    },
    renderScoreBoard: function() {
      var leadScore, player, scores, _i, _j, _len, _len1, _ref, _ref1;
      scores = this.game;
      scores.handNum = scores.players[0].hands.length;
      scores.prevHand = this.previousHands;
      leadScore = (function() {
        var _i, _len, _ref, _results;
        _ref = scores.players;
        _results = [];
        for (_i = 0, _len = _ref.length; _i < _len; _i++) {
          player = _ref[_i];
          _results.push(player.totalScore);
        }
        return _results;
      })();
      leadScore = Utils.maxArray(leadScore);
      _ref = scores.players;
      for (_i = 0, _len = _ref.length; _i < _len; _i++) {
        player = _ref[_i];
        if (player.totalScore === leadScore) {
          player.winning = true;
        }
      }
      this.$container.append(this.$scoreBoardTemplate(scores));
      this.setButtons();
      Utils.transitionCallback(Ohs.$correctBidsForm);
      Ohs.$correctBidsForm.next().on('click', 'button', Ohs.playNextHand).find('tbody').append(scores.prevHand).end().removeClass('hide');
      Utils.transitionTrigger(Ohs.$correctBidsForm);
      Utils.transitionFallback(Ohs.$correctBidsForm, true);
      this.previousHands = $('tbody').html();
      _ref1 = scores.players;
      for (_j = 0, _len1 = _ref1.length; _j < _len1; _j++) {
        player = _ref1[_j];
        player.winning = false;
      }
    },
    playNextHand: function() {
      Utils.transitionCallback($(this).parent());
      Utils.transitionTrigger($(this).parent());
      Utils.transitionFallback($(this).parent(), true);
      return Ohs.renderBiddingForm();
    }
  };

  Ohs.init();

}).call(this);
